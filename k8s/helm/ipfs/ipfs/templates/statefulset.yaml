apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "ipfs.fullname" . }}
  labels:
    app: {{ template "ipfs.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ template "ipfs.servicename" . }}
  template:
    metadata:
      labels:
        app: {{ template "ipfs.name" . }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
    spec:
      #securityContext:
        # The image runs as uid 1000 by default, and needs to be able to write to
        # the persistent volume to be able to start.
        #fsGroup: 1000
        #runAsUser: 1000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ipfs
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image }}
        command: ["/sbin/tini", "--"]
        args:
          - "/bin/entrypoint.sh"
          - daemon
          - --migrate=true
        resources:
          requests:
          memory: 1024Mi
        env:
          - name: USE_CLAIM_NAME
            value: "true"
        ports:
        - containerPort: {{ .Values.swarmPort }}
          protocol: TCP
          name: swarm
        - containerPort: 5001
          name: api
        - containerPort: 8080
          name: gateway
        volumeMounts:
          - name: ipfs-storage
            mountPath: /data/ipfs
          - name: configmap-volume
            mountPath: /bin/entrypoint.sh
            readOnly: true
            subPath: entrypoint.sh
      {{- if .Values.ipfscluster.enabled }}
      - name: cluster-{{ .Chart.Name }}
        image: {{ .Values.ipfscluster.image }}
        command:
          - "ipfs-cluster-service"
          - "daemon"
          - "--upgrade"
          - "--bootstrap"
          - "/ip4/{{ .Values.ipfscluster.bootstrapperIP }}/tcp/9096/ipfs/{{ .Values.ipfscluster.bootstrapperPeerId }}"
        env:
        - name: CLUSTER_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "ipfs.fullname" . }}-ipfs-cluster-secret
              key: CLUSTER_SECRET
        - name: IPFS_API
          value: /ip4/127.0.0.1/tcp/5001
        ports:
        - containerPort: 9094
          name: api
        - containerPort: 9095
          name: gateway
        - containerPort: 9096
          name: tcp
        volumeMounts:
          - name: ipfs-cluster-storage
            mountPath: /data/ipfs-cluster
      initContainers:
      - name: init-ipfscluster-service
        image: {{ .Values.ipfscluster.image }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
        - "/bin/sh"
        - "-c"
        args:
        - "/usr/local/bin/entrypoint.sh; cat /data/ipfs-cluster/service.json;"
        volumeMounts:
          - name: ipfs-cluster-storage
            mountPath: /data/ipfs-cluster
      {{- end }}
      volumes:
        - name: configmap-volume
          configMap:
            defaultMode: 0777
            name: {{ template "ipfs.fullname" . }}-ipfs-config
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: ipfs-storage
        annotations:
          volume.beta.kubernetes.io/storage-class: "{{ .Values.persistence.storageClass }}"
          backup.kubernetes.io/deltas: "{{ .Values.persistence.snapshotRules }}"
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
    {{- if .Values.ipfscluster.enabled }}
    - metadata:
        name: ipfs-cluster-storage
        annotations:
          volume.beta.kubernetes.io/storage-class: "{{ .Values.persistence.storageClass }}"
          backup.kubernetes.io/deltas: "{{ .Values.persistence.snapshotRules }}"
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
    {{- end }}
  {{- else }}
      volumes:
        - name: configmap-volume
          configMap:
            defaultMode: 0700
            name: {{ template "ipfs.fullname" . }}-ipfs-config
        - name: ipfs-storage
          emptyDir: {}
        {{- if .Values.ipfscluster.enabled }}
        - name: ipfs-cluster-storage
          emptyDir: {}
        {{- end }}
  {{- end }}
